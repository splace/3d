#VRML V2.0 utf8

PROTO straightPipe	[ field MFNode nextPipe [] 
					  field MFVec2f scale 1 1
					 field SFVec3f size 1 1 1
					 field SFBool endClosed FALSE
					 field SFBool beginClosed FALSE
					 field SFNode myappearance Appearance { material Material	{ambientIntensity .173 diffuseColor .15 .15 .15 specularColor .925 .91 .89 shininess .06 
				 }}
				     exposedField SFRotation twist 1 0 0 0]
{ 

 Transform {rotation IS twist  scale IS size
 children [
 Shape  { appearance IS myappearance 	 
 geometry Extrusion	{	
 crossSection  [0 -1, -1 0,0 1,1 0, 0 -1]
 spine	[0 0 0, 0 1 0]
 creaseAngle .5
 beginCap IS beginClosed
 endCap	IS endClosed
 scale IS scale}  }
 Transform { translation 0 1 0  children  IS nextPipe }
 ]

}}

PROTO straightRoundPipe	[ field MFNode nextPipe [] 
					  field MFVec2f scale 1 1
					 field SFVec3f size 1 1 1
					 field SFBool endClosed TRUE
					 field SFBool beginClosed TRUE
					 field SFNode myappearance Appearance { material Material	{ambientIntensity .114 diffuseColor .373 .318 0 specularColor 1 1 0 shininess .063
				 }}
				     exposedField SFRotation twist 1 0 0 0]
{ 

 Transform {rotation IS twist  scale IS size
 children [
 Shape  { appearance IS myappearance 	 
 geometry Extrusion	{	
 crossSection  [0 -1, -.38  -.92,-.71 -.71,-.92 -.38 ,-1 0, -.92 .38 ,-.71 .71, -.38 .92 ,0 1,.38 .92 ,.71 .71,.92 .38  ,1 0, .92 -.38, .71 -.71, .38 -.92, 0 -1]	  
 spine	[0 0 0, 0 1 0]
 creaseAngle .5
 beginCap IS beginClosed
 endCap	IS endClosed
 scale IS scale}  }
 Transform { translation 0 1 0  children  IS nextPipe }
 ]

}}


PROTO cornerPipe	[ field MFNode nextPipe [] 
					 field MFVec2f scale 1 1
				     field SFVec3f size 1 1 1
					 field SFBool endClosed FALSE
					 field SFBool beginClosed FALSE
			         field SFNode myappearance Appearance {material Material	{ambientIntensity .106  diffuseColor .15 .15 .15 specularColor .92 .91 .89 
					 shininess .06
				 }}
				     exposedField SFRotation twist 1 0 0 0]
{ 

 Transform {  rotation IS twist  scale IS size
 children [
 Shape  { appearance  IS myappearance 
 geometry Extrusion	{	
 crossSection  [0 -1, -1 0,0 1,1 0, 0 -1]	  
 spine	[0 0 0,0 .199 0, .152 .566 0, .434 .848 0, .801 1 0, 1 1 0]
 creaseAngle 1
 beginCap IS beginClosed
 endCap	IS endClosed

 scale IS scale}  }
 Transform { translation 1 1 0 rotation 0 0 1 -1.57 children  IS nextPipe }
 ]

}}



PROTO robot[exposedField SFVec3f jumpToo 0 0 0
			exposedField SFTime jump -1
			exposedField SFBool startstop TRUE
		    exposedField SFTime rate 1.2
			field SFTime shift	0
			]  

{DEF robotPosition Transform {children [
 DEF robotPosition1 Transform {children [ 
 Viewpoint {description "behind robot"  position -25 1 0 orientation -.10 1 -.10 -1.57 }
 Viewpoint {description "follow robot"  position -5 5 35 orientation 0 1 0  -0.25 }
 Viewpoint {description "infrount of robot" position 12 14 0 orientation -.20 1 .20 1.57}
 DEF robotPosition2 Transform {children [ 
 Transform { rotation 1 0 1 3.14 translation 0 13 0 children [
 straightRoundPipe {beginClosed FALSE endClosed FALSE size 1.05 2 1.05 scale [1.5 1,2 1.5] myappearance Appearance {texture ImageTexture {url ["robot face.gif"] }textureTransform TextureTransform {rotation	3.14 }  
} }
 straightRoundPipe {beginClosed TRUE size 1 2 1 scale [1.5 1,2 1.5] myappearance Appearance {material Material	{ambientIntensity 0 diffuseColor .15 .15 .15 specularColor .92 .91 .89 shininess .06
} } nextPipe	[
 straightRoundPipe {size 1 .25 1 scale [2 1.5,.6 .6] twist 0 1 0 3.14 nextPipe	[
 DEF neck straightRoundPipe {scale .6 .6 nextPipe [
 cornerPipe {size 1 2 1  scale [.6 .6,.6 .6,.8 .8,.9 .9,1 1,1 1] nextPipe	[ 
 straightRoundPipe {twist 0 -1 0 2 size 1 .4 1 nextPipe [
 DEF leftShoulder cornerPipe {size 1 2.5 1 scale [1 1,1.1 1.1, 1.1 1.1, 1 1,.9 .9 ,.9 .9 ] nextPipe	[ 
  cornerPipe {twist 0 -1 0 1.57 scale [.9 .9, .9 .9, .8 .8, .7 .7,.65 .65,.6 .6 ] nextPipe	[ 
    straightPipe {size 1 .5 1 scale[.6 .6,.5 .5 ] nextPipe[
    cornerPipe { size .5 1 .5 scale [1 1,1 1, 1 1,1 1,1.2 1.2 ,1.6 1.6 ]  twist 0 -1 0 1.57 nextPipe	[ 
      DEF leftElbow straightRoundPipe { size 2 .5 2 scale[.8 .8,.8 .8]  nextPipe[
	   cornerPipe {size 1 2 1 twist 0 -1 0 4  scale [.8 .8,.8 .8,.7 .7,.6 .6,.5 .5,.4 .4] nextPipe	[
	   straightPipe { scale[.4 .4,.4 .4] nextPipe[
		 cornerPipe { scale [.4 .4,.4 .4,.5 .5,.6 .6,.7 .7,.7 .7  ] nextPipe [
		  DEF leftwrist straightRoundPipe	{size 1 .25 1 scale  [.7 .7,.7 .7] nextPipe [
           cornerPipe {size 1 2 1 twist 0 -1 0 2.5 scale [.7 .7,.7 .7,.6 .6, .5 .5,.45 .45,.4 .4] nextPipe [
			straightPipe {size 2 1.5 .5 scale [.2 .8,.8 0] }
	     	     ]}
			 	 cornerPipe {size 1 2 1 twist 0 -1 0 3  scale [.7 .7,.7 .7,.6 .6, .5 .5,.45 .45,.4 .4] nextPipe [
			    straightPipe {size 4 1 1 scale [.1 .4,.2 0 ]}
	   	        ]}
			   ]}
		    ]}
		   ]}
        ] }
	  ]}
   ] }
 ]}
   ] }
 ]}
 ]}
 ]}
 cornerPipe {size 1 2 1 twist 0 1 0 3.14  scale [.6 .6,.6 .6,.8 .8,.9 .9,1 1,1 1] nextPipe	[ 
   straightRoundPipe {twist 0 1 0 2 size 1 .4 1 nextPipe [
 DEF rightShoulder  cornerPipe {size 1 2.5 1  scale [1 1,1.1 1.1, 1.1 1.1, 1 1,.9 .9 ,.9 .9 ]   nextPipe	[ 
  cornerPipe {twist 0 1 0 1.57 scale [.9 .9, .9 .9, .8 .8, .7 .7,.65 .65,.6 .6] nextPipe	[ 
     straightPipe {size 1 .5 1  scale[.6 .6,.5 .5] nextPipe[
	    cornerPipe {size .5 1 .5  scale [1 1,1 1, 1 1,1 1,1.2 1.2 ,1.6 1.6]  twist 0 1 0 1.57 nextPipe	[ 
         DEF rightElbow straightRoundPipe {size 2 .5 2  scale[.8 .8,.8 .8]  nextPipe[
	   	  cornerPipe {size 1 2 1 twist 0 1 0 4  scale [.8 .8,.8 .8,.7 .7,.6 .6,.5 .5,.4 .4] nextPipe	[
		   straightPipe { scale[.4 .4,.4 .4]  nextPipe[
  			cornerPipe { scale [.4 .4,.4 .4,.5 .5,.6 .6,.7 .7,.7 .7  ] nextPipe [
		    DEF rightwrist straightRoundPipe {size 1 .25 1 scale  [.7 .7,.7 .7]nextPipe [
		      cornerPipe {size 1 2 1 twist 0 1 0 2.5  scale [.7 .7,.7 .7 .6 .6, .5 .5,.45 .45,.4 .4] nextPipe [
				straightPipe {size 2 1.5 .5 scale [.2 .8,.8 0 ] }
	   	        ]}
			    cornerPipe {size 1 2 1 twist 0 1 0 3 scale [.7 .7,.7 .7,.6 .6, .5 .5,.45 .45,.4 .4] nextPipe [
			    straightPipe {size 4 1 1 scale [.1 .4,.2 0 ] }
	   	        ]}
			   ]}
		      ]}
			]}
        ] }
	  ]}
   ] }
 ]}
   ]}
 ]}
 ]}
 ]}
 straightPipe {myappearance Appearance {material Material {transparency	1} }  nextPipe [
 straightPipe {size 1 8 1 scale[1.5 .8,.6 .6 ] nextPipe [
 DEF waist  straightRoundPipe {size 1 .125 1  scale .6 .6 nextPipe [
  
  cornerPipe {size 1 2 1 scale [.6 .6,.6 .6,.7 .7,.8 .8,1 1,1.25 1.25] nextPipe [
   DEF leftHip straightRoundPipe	{size 1.25 .5 1.25 nextPipe [
    cornerPipe {twist 0 1 0 3.14 size .8 1 .8 scale [1.25 1.25,1.2 1.2,1.1 1.1, .9 .9,.7 .7,.6 .6] nextPipe [
     straightPipe {scale [.6 .6,.5 .5] nextPipe [
	  cornerPipe {scale [.5 .5,.5 .5,.6 .6,.7 .7,.8 .8,1 1  ] nextPipe [
	   DEF leftKnee straightRoundPipe	{ nextPipe [
		 cornerPipe { twist 0 1 0 3.14  scale [1 1,.8 .8,.7 .7, .6 .6,.5 .5,.5 .5] nextPipe [
		  straightPipe {size 1 3 1  scale [.5 .5,.4 .4] nextPipe [
			cornerPipe {size 1 .33 1 scale [.4 .4,.4 .4,.5 .5,.6 .6,.7 .7,.7 .7  ] nextPipe [
			 DEF leftAncle straightRoundPipe {scale  [.7 .7,.7 .7]nextPipe [
		      cornerPipe {twist 0 1 0 2.5  scale [.7 .7,.7 .7 .6 .6, .5 .5,.45 .45,.4 .4] nextPipe [
				straightPipe {size 4 1.5 .5 scale [.1 .8,.8 0 ]}
	   	        ]}
			    cornerPipe {twist 0 1 0 5 scale [.7 .7,.7 .7,.6 .6, .5 .5,.45 .45,.4 .4] nextPipe [
			    straightPipe {size 2 1 1 scale [.2 .4,.2 0 ] }
	   	        ]}

		      ]}
			]}
		  ]}
		 ]}
	   ]}
	  ]}
	 ]}	 
    ]}
   ]}
   ]}
  cornerPipe {size 1 2 1  twist 0 1 0 3.14 scale [.6 .6,.6 .6,.7 .7,.8 .8,1 1,1.25 1.25  ]nextPipe [
   DEF rightHip straightRoundPipe	{size 1.25 .5 1.25  nextPipe [
    cornerPipe {twist 0 1 0 3.14  size .8 1 .8 scale [1.25 1.25,1.2 1.2,1.1 1.1, .9 .9,.7 .7,.6 .6] nextPipe [
     straightPipe {size 1 1 1  scale [.6 .6,.5 .5] nextPipe [
	  cornerPipe {size 1 1 1 scale [.5 .5,.5 .5,.6 .6,.7 .7,.8 .8,1 1 ] nextPipe [
	   DEF rightKnee straightRoundPipe	{ nextPipe [
	   cornerPipe {twist 0 1 0 3.14 scale [1 1,.8 .8,.7 .7, .6 .6,.5 .5,.5 .5] nextPipe [
	    straightPipe {size 1 3 1  scale [.5 .5,.4 .4] nextPipe [
		 cornerPipe {size 1 .33 1 scale [.4 .4,.4 .4,.5 .5,.6 .6,.7 .7,.7 .7  ] nextPipe [
		  DEF rightAncle straightRoundPipe	{scale  [.7 .7,.7 .7] nextPipe [
           cornerPipe {twist 0 -1 0 2.5 scale [.7 .7,.7 .7,.6 .6, .5 .5,.45 .45,.4 .4] nextPipe [
#			Sound { source DEF	footFall  AudioClip { url ["foot fall.mid"]}}
   			straightPipe {size 4 1.5 .5 scale [.1 .8,.8 0] }
	   	     ]}
			 	 cornerPipe {twist 0 -1 0 5  scale [.7 .7,.7 .7,.6 .6, .5 .5,.45 .45,.4 .4] nextPipe [
			    straightPipe { size 2 1 1 scale [.2 .4,.2 0 ] }
	   	        ]}

		    ]}
		   ]}
		  ]}
		 ]} 
       ]}
	  ]}
	 ]}
    ]}
   ]}
   ]}
  ]}
 ]}
]}
]}
]}
]}
]}
]}
]}
]}

DEF dummy Transform {translation IS jumpToo } 

DEF maintimer TimeSensor {cycleInterval IS rate loop TRUE enabled IS startstop}

#ROUTE maintimer.cycleTime TO footFall.startTime

DEF	sinCycle OrientationInterpolator {key [0,.25,.5,.75,  1 ] keyValue [0 1 0 0,0 1 0 1, 0 1 0 0, 0 1 0 -1, 0 1 0 0 ]}
ROUTE maintimer.fraction_changed TO	 sinCycle.set_fraction

DEF	msinCycle OrientationInterpolator {key [0,.25,.5,.75,  1 ] keyValue [0 1 0 0,0 1 0 -1, 0 1 0 0, 0 1 0 1, 0 1 0 0 ]}
ROUTE maintimer.fraction_changed TO	 msinCycle.set_fraction

DEF	waistCycle OrientationInterpolator {key [0,.25,.5,.75,  1 ] keyValue [0 1 0 0,0 1 0 -.2, 0 1 0 0, 0 1 0 .2, 0 1 0 0 ]}
ROUTE maintimer.fraction_changed TO	 waistCycle.set_fraction

DEF	lkneeCycle OrientationInterpolator {key [0,.25,.5,.75,  1 ] keyValue [0 1 0 -.1,0 1 0 -.8, 0 1 0 -1.57, 0 1 0 -.6, 0 1 0 0 ]}
ROUTE maintimer.fraction_changed TO	 lkneeCycle.set_fraction

DEF	rkneeCycle OrientationInterpolator {key [0,.25,.5,.75,  1 ] keyValue [0 1 0 1.57,0 1 0 .6, 0 1 0 0, 0 1 0 .8, 0 1 0 1.57 ]}
ROUTE maintimer.fraction_changed TO	 rkneeCycle.set_fraction

DEF	lancleCycle OrientationInterpolator {key [0,.25,.5,.75,  1 ] keyValue [0 -1 0 .6,0 -1 0 0, 0 -1 0 2, 0 -1 0 .2, 0 -1 0 .6 ]}
ROUTE maintimer.fraction_changed TO	 lancleCycle.set_fraction

DEF	rancleCycle OrientationInterpolator {key [0,.25,.5,.75,1 ] keyValue [0 1 0 2,0 1 0 .2, 0 1 0 .6, 0 1 0 0, 0 1 0 2]}
ROUTE maintimer.fraction_changed TO	 rancleCycle.set_fraction


ROUTE waistCycle.value_changed TO	waist.twist
ROUTE sinCycle.value_changed   TO   leftHip.twist
ROUTE sinCycle.value_changed TO	rightHip.twist
ROUTE rkneeCycle.value_changed TO	rightKnee.twist																	   
ROUTE lkneeCycle.value_changed TO	leftKnee.twist
ROUTE rancleCycle.value_changed TO	rightAncle.twist
ROUTE lancleCycle.value_changed TO	leftAncle.twist

	  
ROUTE msinCycle.value_changed TO	rightShoulder.twist
ROUTE msinCycle.value_changed TO	leftShoulder.twist

ROUTE sinCycle.value_changed TO	rightElbow.twist
ROUTE sinCycle.value_changed TO	leftElbow.twist


DEF	cycleInt1 PositionInterpolator {key [0,.1,.5,.6,  1 ] keyValue [-24 0 0,-21 0 0,-12 0 0,-9 0 0,0 0 0  ]}
DEF	cycleInt2 PositionInterpolator {key [0,.1,.5,.6,  1 ] keyValue [0 0 0,0 1 0,0 0 0,0 1 0,0 0 0  ]}

ROUTE maintimer.fraction_changed TO	 cycleInt1.set_fraction
ROUTE cycleInt1.value_changed TO robotPosition1.translation

ROUTE maintimer.fraction_changed TO	 cycleInt2.set_fraction
ROUTE cycleInt2.value_changed TO robotPosition2.translation

DEF	cycleIntr OrientationInterpolator {key [0,.25,.5,.75,  1 ] keyValue [0 1 0 .4,0 1 0,.3,0 1 0 .2 ,0 1 0 .1,0 1 0 0.00001  ]}

ROUTE maintimer.fraction_changed TO	 cycleIntr.set_fraction
ROUTE cycleIntr.value_changed TO robotPosition1.rotation




	DEF step Script {
	field SFRotation tempRot 0 1 0 0.0001
	field SFRotation rotStep 0 1 0 -0.4
	field SFVec3f tempLoc 0 0 0
	field SFVec3f locStep  24 0 0
    eventIn SFTime stepTime
	eventIn	SFRotation setrotstep
	eventIn	SFVec3f	setlocstep
    eventIn SFVec3f setlocation
	eventOut SFVec3f newlocation
	eventOut SFRotation	neworientation

	url "javascript: 
		 function stepTime(value) {  
		 tempRot[3]=tempRot[3]+rotStep[3];
		 neworientation [0]=tempRot[0];
	     neworientation [1]=tempRot[1];
		 neworientation [2]=tempRot[2];
		 neworientation [3]=tempRot[3]; 
		 print (neworientation);
		  var st= Math.sin(tempRot[3]);
		 var ct= Math.cos(tempRot[3]);
		 tempLoc[0]+=st*(locStep[2]*tempRot[1]-locStep[1]*tempRot[2])+ct*locStep[0] ;
		 tempLoc[1]+=st*(locStep[0]*tempRot[2]-locStep[2]*tempRot[0])+ct*locStep[1] ;
		 tempLoc[2]+=st*(locStep[1]*tempRot[0]-locStep[0]*tempRot[1])+ct*locStep[2] ;

		 newlocation [0]=tempLoc[0]	;
		 newlocation [1]=tempLoc[1];
		 newlocation [2]=tempLoc[2]; }
		 function setrotstep(value) {
		  rotStep[0]=value[0];
		  rotStep[1]=value[1];
		  rotStep[2]=value[2];
		  rotStep[3]=value[3];
		  tempRot[0]=value[0];
		  tempRot[1]=value[1];
		  tempRot[2]=value[2]; }
    	 function setlocstep(value) {
		  locStep[0]=value[0];
		  locStep[1]=value[1];
		  locStep[2]=value[2]; }
          function setlocation(value) {
		  tempLoc[0]=value[0];
		  tempLoc[1]=value[1];
		  tempLoc[2]=value[2]; } "
	}

DEF	shiftTime Script  {eventIn SFTime time eventOut	SFTime shiftedTime field SFTime	tempshift IS shift
	url ["javascript:
		function time(value) {
			print (tempshift) ;
			shiftedTime=value+tempshift; }"]}


ROUTE dummy.translation	TO step.setlocation
ROUTE maintimer.cycleTime TO step.stepTime
ROUTE step.newlocation TO robotPosition.translation
ROUTE step.neworientation TO robotPosition.rotation
}

DirectionalLight {direction	0 1 0 color 0 1 0 ambientIntensity 1 }
Viewpoint {description "home" position 0 0 150 }
robot {} 
